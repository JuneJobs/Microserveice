@startuml
title Test Diagram
/'
    class Building{
        Health
        Ammor
        construct()
        underattack()
    }
'/
    class Carrier {
        Intercepter
    }
    
    class Intercepter {
        Health
        Attack(ref Charactor)
    }

    Carrier *-- Intercepter

    class Barraks{
        MakeMarine()
        MakeMedic()
    }

    class Marine {
        Weaphon
        Move()
        Attack()
        UnderAttack()
    }
    class 5_56mmGun {
        Name
        AttackPower
        Upgrade()
    }
    Marine --> 5_56mmGun
/'
    class Medic {
        Move()
        UnderAttack()
        Healing()
    }
    Barraks ..> Marine
    Barraks ..>Medic
'/
    class Factory{
        FactoryAddOn
        AddOn(ref FactoryAddOn)
    }
    
    class FactoryAddOn {
        Health: var
        UnderAttack(ref Character)
    }
    Factory o-- FactoryAddOn

    class Bunker{

    }
/'
    Building <|-- Barraks
    Building <|-- Factory
    Building <|-- Bunker
'/
    class IBuildingMoove {
        Move()
        Land()
        Fly()
    }
/'
    Barraks ..|> IBuildingMoove
    Factory ..|> IBuildingMoove
'/
    class A{
        var a
    }
    class B{
        var b
    }
    A *-- B

    Class Person {
        firstName: var
        lastName: var
        address: Address
        DoSomething()
    }
    /'    
        var firstName
        var lastName
        Address address
    class Professor {
        Selary: dollor
    }
    Person <|.. Professor
 
    class Student {
        Major: var 
    }
    Person <|.. Student

   '/
    
    Class Address {
        street: var
        city: var
        zip: var
        toString(): string
    }
    Person --> Address
    
    class Order {
        Engine m_Engine
    } 
/'
    class Car {
        Engine m_Engine
        Wheel[] m_Wheel

        void setEngine(Engine E_engine)
        void setWhile(Wheel[] m_Wheel)
    }

    class Engine {

    }

    class Wheel {

    }
    Car o-- Engine
    Car o-- Wheel
    Order o-- Engine
'/
    class Telephone {
        Button m_Button
        Headset m_Headset

        Telephone()
    }
    class Button {

    }
    class Headset {

    }
    Telephone *-- Button
    Telephone *-- Headset
@enduml
